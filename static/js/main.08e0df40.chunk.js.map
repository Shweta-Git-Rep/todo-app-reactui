{"version":3,"sources":["components/todoInput.jsx","components/todo.jsx","components/todoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoInput","setTodoText","todoText","setTodoList","todoList","onSubmit","e","preventDefault","text","completed","id","Math","random","className","onChange","target","value","type","placeholder","name","Todo","todo","style","styleText","width","paddingTop","float","map","todoItem","checked","onClick","filter","TodoList","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAwCeA,EAtCG,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAqBvD,OACE,uBAAMC,SAjBgB,SAAAC,GACtBA,EAAEC,iBAGFJ,EAAY,GAAD,mBACNC,GADM,CAET,CACEI,KAAMN,EACNO,WAAW,EACXC,GAAoB,IAAhBC,KAAKC,aAIbX,EAAY,KAIqBY,UAAU,aAA3C,UACE,uBACEC,SAvBgB,SAAAR,GACpBL,EAAYK,EAAES,OAAOC,QAuBjBC,KAAK,OACLD,MAAOd,EACPgB,YAAY,kBACZC,KAAK,eACLN,UAAU,oBAEZ,wBAAQI,KAAK,SAASJ,UAAU,6BAAhC,qB,OCeSO,EA9CF,SAAC,GAA2C,IAAzCZ,EAAwC,EAAxCA,KAAMJ,EAAkC,EAAlCA,SAAUD,EAAwB,EAAxBA,YAAakB,EAAW,EAAXA,KAkBvCC,EAAQ,6CACZA,IAA4B,IAAnBD,EAAKZ,UAAqB,aAAe,GAGlD,IAAIc,EAAY,YAIhB,OAHAA,IAAgC,IAAnBF,EAAKZ,UAAqB,iBAAmB,GAIxD,qBAAKI,UAAU,OAAOS,MAAO,CAAEE,MAAO,QAASC,WAAY,QAA3D,SACE,qBAAIZ,UAAWS,EAAf,UACE,sBAAMT,UAAWU,EAAjB,SAA6Bf,IAC7B,uBAAMK,UAAU,eAAeS,MAAO,CAAEI,MAAO,SAA/C,UACE,uBACET,KAAK,WACLJ,UAAU,MACVC,SA5BS,WACjBX,EACEC,EAASuB,KAAI,SAAAC,GACX,OAAIA,EAASlB,KAAOW,EAAKX,GAChB,2BAAKkB,GAAZ,IAAsBnB,WAAYmB,EAASnB,YAEtCmB,OAuBHC,QAASR,EAAKZ,YAEhB,wBAAQI,UAAU,4BAA4BiB,QApCrC,WACf3B,EAAYC,EAAS2B,QAAO,SAAAH,GAAQ,OAAIA,EAASlB,KAAOW,EAAKX,QAmCvD,wBClBKsB,EAlBE,SAAC,GAA+B,IAA7B5B,EAA4B,EAA5BA,SAAUD,EAAkB,EAAlBA,YAC5B,OACE,qBAAKU,UAAU,YAAf,SACE,oBAAIA,UAAU,2BAAd,SACGT,EAASuB,KAAI,SAAAC,GAAQ,OACpB,cAAC,EAAD,CACEpB,KAAMoB,EAASpB,KAEfa,KAAMO,EACNzB,YAAaA,EACbC,SAAUA,GAHLwB,EAASpB,cCaXyB,MAlBf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOhC,EAAP,KAAiBD,EAAjB,KACA,EAAgCiC,mBAAS,IAAzC,mBAAO9B,EAAP,KAAiBD,EAAjB,KAEA,OACE,sBAAKU,UAAU,MAAf,UACE,oBAAIA,UAAU,cAAd,0BACA,cAAC,EAAD,CACEZ,YAAaA,EACbC,SAAUA,EACVC,YAAaA,EACbC,SAAUA,IAEZ,cAAC,EAAD,CAAUD,YAAaA,EAAaC,SAAUA,QCNrC+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08e0df40.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TodoInput = ({ setTodoText, todoText, setTodoList, todoList }) => {\r\n  const onInputChange = e => {\r\n    setTodoText(e.target.value);\r\n  };\r\n\r\n  const onSubmitHandler = e => {\r\n    e.preventDefault(); //this will prevent submit button's default function\r\n    //which is to refresh on submit\r\n\r\n    setTodoList([\r\n      ...todoList,\r\n      {\r\n        text: todoText,\r\n        completed: false,\r\n        id: Math.random() * 10000\r\n      }\r\n    ]); // '...todoList' will keep if any existing value and add new todo after\r\n\r\n    setTodoText(\"\"); //to make input box empty after submit\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler} className=\"todo-input\">\r\n      <input\r\n        onChange={onInputChange}\r\n        type=\"text\"\r\n        value={todoText}\r\n        placeholder=\"Enter a todo...\"\r\n        name=\"todo-textbox\"\r\n        className=\"form-control-sm\"\r\n      />\r\n      <button type=\"Submit\" className=\"btn btn-warning btn-sm m-2\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInput;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ text, todoList, setTodoList, todo }) => {\r\n  const onDelete = () => {\r\n    setTodoList(todoList.filter(todoItem => todoItem.id !== todo.id));\r\n    //filtering out from list based on id\r\n  };\r\n\r\n  const onComplete = () => {\r\n    setTodoList(\r\n      todoList.map(todoItem => {\r\n        if (todoItem.id === todo.id) {\r\n          return { ...todoItem, completed: !todoItem.completed };\r\n        }\r\n        return todoItem;\r\n      })\r\n    );\r\n    //updating completed to true/false\r\n  };\r\n\r\n  let style = \"list-group-item bg-secondary py-0 clearfix\";\r\n  style += todo.completed === true ? \" completed\" : \"\"; //changing className on complete\r\n  //to update styling based on new className\r\n\r\n  let styleText = \"todo-text\";\r\n  styleText += todo.completed === true ? \" completedText\" : \"\"; //changing className on complete\r\n  //to update styling based on new className\r\n\r\n  return (\r\n    <div className=\"todo\" style={{ width: \"300px\", paddingTop: \"10px\" }}>\r\n      <li className={style}>\r\n        <span className={styleText}>{text}</span>\r\n        <span className=\"todo-buttons\" style={{ float: \"right\" }}>\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"m-2\"\r\n            onChange={onComplete}\r\n            checked={todo.completed}\r\n          />\r\n          <button className=\"btn btn-sm btn-danger m-2\" onClick={onDelete}>\r\n            x\r\n          </button>\r\n        </span>\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./todo\";\r\n\r\nconst TodoList = ({ todoList, setTodoList }) => {\r\n  return (\r\n    <div className=\"todo-list\">\r\n      <ul className=\"list-group list-unstyled\">\r\n        {todoList.map(todoItem => (\r\n          <Todo\r\n            text={todoItem.text}\r\n            key={todoItem.text}\r\n            todo={todoItem}\r\n            setTodoList={setTodoList}\r\n            todoList={todoList}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport TodoInput from \"./components/todoInput\";\nimport TodoList from \"./components/todoList\";\n\nfunction App() {\n  const [todoText, setTodoText] = useState(\"\"); //holds new todo input\n  const [todoList, setTodoList] = useState([]); //holds a list of todos\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"todo-header\">My ToDo List</h1>\n      <TodoInput\n        setTodoText={setTodoText}\n        todoText={todoText}\n        setTodoList={setTodoList}\n        todoList={todoList}\n      />\n      <TodoList setTodoList={setTodoList} todoList={todoList} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}